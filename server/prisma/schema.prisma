// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email    String @unique @db.VarChar(191)
  password String
  role     Role

  school  School?
  teacher Teacher?
  parent  Parent?
}

model School {
  id Int @id @default(autoincrement())

  nameStreetId String      @unique @db.VarChar(191)
  name         String      @db.VarChar(191)
  fixedPeriod  FixedPeriod

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  schoolAddress SchoolAddress?
  teachers      SchoolsTeachers[]
  parents       SchoolsParents[]
  students      Student[]
}

model SchoolAddress {
  id Int @id @default(autoincrement())

  zipCode      Int
  country      String  @db.VarChar(191)
  state        String  @db.VarChar(191)
  city         String  @db.VarChar(191)
  neighborhood String  @db.VarChar(191)
  street       String  @db.VarChar(191)
  number       Int
  complement   String? @db.VarChar(191)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId Int    @unique
}

model SchoolsTeachers {
  id Int @id @default(autoincrement())

  isApproved Boolean @default(false)

  school    School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  Int
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId Int

  @@unique([schoolId, teacherId])
  @@map("schools_teachers")
}

model SchoolsParents {
  id Int @id @default(autoincrement())

  isApproved Boolean @default(false)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId Int    @unique
  parent   Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int    @unique

  @@unique([schoolId, parentId])
  @@map("schools_parents")
}

model Teacher {
  id Int @id @default(autoincrement())

  name     String @db.VarChar(191)
  subjects String @db.VarChar(191)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  schools SchoolsTeachers[]
}

model Parent {
  id Int @id @default(autoincrement())

  name String @db.VarChar(191)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  schools   SchoolsParents[]
  childrens Student[]
}

model Student {
  id Int @id @default(autoincrement())

  name String @db.VarChar(191)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId Int    @unique
  parent   Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int    @unique

  grades       Grade[]
  observations Observation[]
}

model Grade {
  id Int @id @default(autoincrement())

  typeGrade     TypeGrade
  value         Int
  total         Int
  numberedPerid Int
  date          DateTime

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
}

model Observation {
  id Int @id @default(autoincrement())

  description String
  date        DateTime

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
}

enum Role {
  PARENT
  TEACHER
  SCHOOL
}

enum FixedPeriod {
  PERIODO
  MES
  BIMESTRE
  SEMESTRE
  ANO
}

enum TypeGrade {
  AVALIACAO
  TRABALHO
  EXERCICIO
  EXTRA
}
